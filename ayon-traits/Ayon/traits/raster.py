
"""
Trait definitions in the 'raster' namespace.

Traits related to raster images.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio import TraitsData


class ColorManagedTrait:
    """
    A trait indicating a color managed image.
    Usage: entity
    """
    kId = "Ayon:raster.ColorManaged"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setColorSpace(self, colorSpace: str):
        """
        Sets the colorSpace property.

        Color space of the image.
        """
        if not isinstance(colorSpace, str):
            raise TypeError("colorSpace must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "colorSpace", colorSpace)

    def getColorSpace(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the colorSpace property or the supplied default.

        Color space of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "colorSpace")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setColorSpaceTransform(self, colorSpaceTransform: str):
        """
        Sets the colorSpaceTransform property.

        Color space transform of the image.
        """
        if not isinstance(colorSpaceTransform, str):
            raise TypeError("colorSpaceTransform must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "colorSpaceTransform", colorSpaceTransform)

    def getColorSpaceTransform(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the colorSpaceTransform property or the supplied default.

        Color space transform of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "colorSpaceTransform")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setColorSpaceTransformConfig(self, colorSpaceTransformConfig: str):
        """
        Sets the colorSpaceTransformConfig property.

        Color space transform config of the image.
        """
        if not isinstance(colorSpaceTransformConfig, str):
            raise TypeError("colorSpaceTransformConfig must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "colorSpaceTransformConfig", colorSpaceTransformConfig)

    def getColorSpaceTransformConfig(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the colorSpaceTransformConfig property or the supplied default.

        Color space transform config of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "colorSpaceTransformConfig")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setColorSpaceTransformContext(self, colorSpaceTransformContext: str):
        """
        Sets the colorSpaceTransformContext property.

        Color space transform context of the image.
        """
        if not isinstance(colorSpaceTransformContext, str):
            raise TypeError("colorSpaceTransformContext must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "colorSpaceTransformContext", colorSpaceTransformContext)

    def getColorSpaceTransformContext(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the colorSpaceTransformContext property or the supplied default.

        Color space transform context of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "colorSpaceTransformContext")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setColorSpaceTransformVersion(self, colorSpaceTransformVersion: str):
        """
        Sets the colorSpaceTransformVersion property.

        Color space transform version of the image.
        """
        if not isinstance(colorSpaceTransformVersion, str):
            raise TypeError("colorSpaceTransformVersion must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "colorSpaceTransformVersion", colorSpaceTransformVersion)

    def getColorSpaceTransformVersion(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the colorSpaceTransformVersion property or the supplied default.

        Color space transform version of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "colorSpaceTransformVersion")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    


class ImageTrait:
    """
    A trait indicating a raster image.
    Usage: entity
    """
    kId = "Ayon:raster.Image"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setChannels(self, channels: int):
        """
        Sets the channels property.

        Number of channels in the image.
        """
        if not isinstance(channels, int):
            raise TypeError("channels must be a 'int'.")
        self.__data.setTraitProperty(self.kId, "channels", channels)

    def getChannels(self, defaultValue: int=None) -> Union[int, None]:
        """
        Gets the value of the channels property or the supplied default.

        Number of channels in the image.
        """
        value = self.__data.getTraitProperty(self.kId, "channels")
        if value is None:
            return defaultValue

        if not isinstance(value, int):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'int'.")
            return defaultValue
        return value
        
    def setCompression(self, compression: str):
        """
        Sets the compression property.

        Compression of the image.
        """
        if not isinstance(compression, str):
            raise TypeError("compression must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "compression", compression)

    def getCompression(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the compression property or the supplied default.

        Compression of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "compression")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setDepth(self, depth: int):
        """
        Sets the depth property.

        Bit depth of the image.
        """
        if not isinstance(depth, int):
            raise TypeError("depth must be a 'int'.")
        self.__data.setTraitProperty(self.kId, "depth", depth)

    def getDepth(self, defaultValue: int=None) -> Union[int, None]:
        """
        Gets the value of the depth property or the supplied default.

        Bit depth of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "depth")
        if value is None:
            return defaultValue

        if not isinstance(value, int):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'int'.")
            return defaultValue
        return value
        
    def setFrameAspectRatio(self, frameAspectRatio: float):
        """
        Sets the frameAspectRatio property.

        Frame aspect ratio of the image.
        """
        if not isinstance(frameAspectRatio, float):
            raise TypeError("frameAspectRatio must be a 'float'.")
        self.__data.setTraitProperty(self.kId, "frameAspectRatio", frameAspectRatio)

    def getFrameAspectRatio(self, defaultValue: float=None) -> Union[float, None]:
        """
        Gets the value of the frameAspectRatio property or the supplied default.

        Frame aspect ratio of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "frameAspectRatio")
        if value is None:
            return defaultValue

        if not isinstance(value, float):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'float'.")
            return defaultValue
        return value
        
    def setHeight(self, height: int):
        """
        Sets the height property.

        Height of the image in pixels.
        """
        if not isinstance(height, int):
            raise TypeError("height must be a 'int'.")
        self.__data.setTraitProperty(self.kId, "height", height)

    def getHeight(self, defaultValue: int=None) -> Union[int, None]:
        """
        Gets the value of the height property or the supplied default.

        Height of the image in pixels.
        """
        value = self.__data.getTraitProperty(self.kId, "height")
        if value is None:
            return defaultValue

        if not isinstance(value, int):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'int'.")
            return defaultValue
        return value
        
    def setPixelAspectRatio(self, pixelAspectRatio: float):
        """
        Sets the pixelAspectRatio property.

        Pixel aspect ratio of the image.
        """
        if not isinstance(pixelAspectRatio, float):
            raise TypeError("pixelAspectRatio must be a 'float'.")
        self.__data.setTraitProperty(self.kId, "pixelAspectRatio", pixelAspectRatio)

    def getPixelAspectRatio(self, defaultValue: float=None) -> Union[float, None]:
        """
        Gets the value of the pixelAspectRatio property or the supplied default.

        Pixel aspect ratio of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "pixelAspectRatio")
        if value is None:
            return defaultValue

        if not isinstance(value, float):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'float'.")
            return defaultValue
        return value
        
    def setWidth(self, width: int):
        """
        Sets the width property.

        Width of the image in pixels.
        """
        if not isinstance(width, int):
            raise TypeError("width must be a 'int'.")
        self.__data.setTraitProperty(self.kId, "width", width)

    def getWidth(self, defaultValue: int=None) -> Union[int, None]:
        """
        Gets the value of the width property or the supplied default.

        Width of the image in pixels.
        """
        value = self.__data.getTraitProperty(self.kId, "width")
        if value is None:
            return defaultValue

        if not isinstance(value, int):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'int'.")
            return defaultValue
        return value
        
    


class LensDistortionTrait:
    """
    A trait indicating a lens distorted image.
    Usage: entity
    """
    kId = "Ayon:raster.LensDistortion"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setLensDistortionModel(self, lensDistortionModel: str):
        """
        Sets the lensDistortionModel property.

        Lens distortion model of the image.
        """
        if not isinstance(lensDistortionModel, str):
            raise TypeError("lensDistortionModel must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "lensDistortionModel", lensDistortionModel)

    def getLensDistortionModel(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the lensDistortionModel property or the supplied default.

        Lens distortion model of the image.
        """
        value = self.__data.getTraitProperty(self.kId, "lensDistortionModel")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    

